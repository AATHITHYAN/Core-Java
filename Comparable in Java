package CollectionsFramework;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class ComparableMethod implements Comparable<ComparableMethod>
{
	private int rollNumber;
	private String name;
	private String address;
	
	public ComparableMethod() {
		super();
	}

	public ComparableMethod(int rollNumber, String name, String address) {
		super();
		this.rollNumber = rollNumber;
		this.name = name;
		this.address = address;
	}
	
	public int getRollNumber() {
		return rollNumber;
	}

	public void setRollNumber(int rollNumber) {
		this.rollNumber = rollNumber;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		//result = prime * result + ((address == null) ? 0 : address.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		//result = prime * result + rollNumber;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ComparableMethod other = (ComparableMethod) obj;
		if (address == null) {
			if (other.address != null)
				return false;
		} else if (!address.equals(other.address))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (rollNumber != other.rollNumber)
			return false;
		return true;
	}

	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		ComparableMethod cm = new ComparableMethod();
		ArrayList<ComparableMethod> arrayList = new ArrayList<>();
		while(true)
		{
			System.out.println("Enter the roll number: ");
			cm.setRollNumber(sc.nextInt());
			System.out.println();
			System.out.println("Enter the name:");
			cm.setName(sc.nextLine());
			System.out.println("Enter the address: ");
			cm.setAddress(sc.nextLine());
			arrayList.add(new ComparableMethod(cm.getRollNumber(),cm.getName(), cm.address));
			
			System.out.println("Enter 'exit' to exit the program: ");
			if("exit".equalsIgnoreCase(sc.next()))
			{
				break;
			}
		}
		sc.close();
		//Before Sort:
		for(ComparableMethod cmm: arrayList)
		{
			System.out.println(cmm.rollNumber);
			System.out.println(cmm.name);
			System.out.println(cmm.address);
		}
		
		Collections.sort(arrayList);
		//After Sort:
		for(ComparableMethod cmm: arrayList)
		{
			System.out.println(cmm.rollNumber);
			System.out.println(cmm.name);
			System.out.println(cmm.address);
		}
	}
	/*Sorting Integer:
	@Override
	public int compareTo(ComparableMethod o)
	{
		if(this.rollNumber > o.rollNumber)
		{
			return 1;
		}
		else if(this.rollNumber < o.rollNumber)
		{
			return -1;
		}
		return 0;
	}*/
	
	//Sorting String:
	@Override
	public int compareTo(ComparableMethod o) 
	{
		return	this.getName().compareTo(o.getName());
	}
}
