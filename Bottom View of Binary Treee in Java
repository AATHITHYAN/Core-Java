package Programs;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Queue;
import java.util.Set;
import java.util.TreeMap;

class Node
{
	int data;
	int hd;
	Node left, right;
	
	public Node(int data)
	{
		this.data = data;
		hd = Integer.MAX_VALUE;
		left = right = null;
	}
}

public class BottomViewOfBinaryTree 
{
	Node root;
	
	public BottomViewOfBinaryTree() 
	{
		
	}
	
	public BottomViewOfBinaryTree(Node node)
	{
		root = node;
	}
	
	public void bottomView()
	{
		if(root == null)
		{
			return;
		}
		
		int hd = 0;
		
		Map<Integer, Integer> map = new TreeMap<>();
		
		Queue<Node> queue = new LinkedList<>();
		
		root.hd = hd;
		queue.add(root);
		
		while(!queue.isEmpty())
		{
			Node temp = queue.remove();
			hd = temp.hd;
			map.put(hd, temp.data);
			
			if(temp.left != null)
			{
				temp.left.hd = hd - 1;
				queue.add(temp.left);
			}
			
			if(temp.right != null)
			{
				temp.right.hd = hd + 1;
				queue.add(temp.right);
			}
		}
		
		Set<Entry<Integer, Integer>> set = map.entrySet();
		
		Iterator<Entry<Integer, Integer>> itr = set.iterator();
		
		while(itr.hasNext())
		{
			Map.Entry<Integer, Integer> me = itr.next();
			System.out.print(me.getValue() + " ");
		}
	}
	
	public static void main(String[] args) 
	{
		Node root = new Node(20);
		root.left = new Node(8);
		root.right = new Node(22);
		root.left.left = new Node(5);
		root.left.right = new Node(3);
		root.right.left = new Node(4);
		root.right.right = new Node(25);
		root.left.right.left = new Node(10);
		root.left.right.right = new Node(14);
		
		BottomViewOfBinaryTree bvobt = new BottomViewOfBinaryTree(root);
		System.out.println("Bottom view: ");
		bvobt.bottomView();
	}

}
