package Programs;

import java.util.Arrays;

public class MatrixMedianUsingDivideAndConquer {
	public static int binaryMedian(int array[][], int row, int col)
	{
		int maximum = Integer.MIN_VALUE;
		int minimum = Integer.MAX_VALUE;
		
		for(int i = 0; i < row - 1; i++)
		{
			if(array[i][0] < minimum)
			{
				minimum = array[i][0];
			}
			
			if(array[i][col - 1] > maximum)
			{
				maximum = array[i][col - 1];
			}
		}
		
		int value = (row * col + 1) / 2;
		
		while(minimum < maximum)
		{
			int midValue = minimum + (maximum - minimum) / 2;
			int position = 0;
			int get = 0;
			
			for(int i = 0; i < row; i++)
			{
				get = Arrays.binarySearch(array[i], midValue);
				
				if(get < 0)
				{
					get = Math.abs(get) - 1;
				}
				else
				{
					while(get < array[i].length && array[i][get] == midValue)
					{
						get += 1;
					}
				}
				position = position + get;
			}
			if(position < value)
			{
				minimum = midValue + 1;
			}
			else
			{
				maximum = midValue;
			}
		}
		return minimum;
	}
	
	public static void main(String[] args) {
		int row = 3;
		int col = 3;
		
		int array[][] = {{1, 3, 5},
						{2, 6, 9},
						{3, 6, 9}};
		
		System.out.println("Median : " + binaryMedian(array, row, col));
	}

}
