package Programs;

import java.util.Stack;

class Node2
{
	Node2 left;
	Node2 right;
	int data;
}

class BinaryTree1
{
	public Node2 createNode(int value)
	{
		Node2 newNode = new Node2();
		newNode.data = value;
		newNode.left = null;
		newNode.right = null;
		
		return newNode;
	}
	
	public void print(Node2 node)
	{
		Stack<Node2> stack1 = new Stack<>();
		Stack<Node2> stack2 = new Stack<>();
		
		stack1.push(node);
		
		while(!stack1.isEmpty() || !stack2.isEmpty())
		{
			while(!stack1.isEmpty())
			{
				Node2 temp = stack1.pop();
				System.out.print(temp.data + " ");
				
				if(temp.left != null)
				{
					stack2.push(temp.left);
				}
				
				if(temp.right != null)
				{
					stack2.push(temp.right);
				}
			}
			
			System.out.println();
			
			while(!stack2.isEmpty())
			{
				Node2 temp = stack2.pop();
				System.out.print(temp.data + " ");
				
				if(temp.right != null)
				{
					stack1.push(temp.right);
				}
				
				if(temp.left != null)
				{
					stack1.push(temp.left);
				}
			}
			
			System.out.println();
		}
	}
}

public class SpiralOrderBinaryTree 
{
	public static void main(String[] args) 
	{
		BinaryTree1 bt = new BinaryTree1();
		
		Node2 root = bt.createNode(2);
		root.left = bt.createNode(7);
		root.right = bt.createNode(5);
		root.left.left = bt.createNode(12);
		root.left.right = bt.createNode(6);
		root.left.right.left = bt.createNode(5);
		root.left.right.right = bt.createNode(11);
		root.right.right = bt.createNode(9);
		root.right.right.left = bt.createNode(4);
		
		bt.print(root);
	}

}
